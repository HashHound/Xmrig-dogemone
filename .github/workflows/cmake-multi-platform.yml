name: CMake Build and Cross-Compile for Windows on Ubuntu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual trigger

jobs:
  ubuntu-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux build
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libssl-dev libcurl4-openssl-dev build-essential

      - name: Configure CMake for Linux
        run: |
          cmake -B build -S . \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_BUILD_TYPE=Release

      - name: Build for Linux
        run: cmake --build build --config Release

      - name: Package Linux Artifact
        run: |
          cd build
          zip -r ubuntu-build.zip .
        shell: bash

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-build.zip
          path: build/ubuntu-build.zip

  windows-cross-compile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Windows cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake mingw-w64

      - name: Download and Extract Windows libcurl
        run: |
          curl -LO https://curl.se/download/curl-7.53.1.tar.gz
          tar -xzf curl-7.53.1.tar.gz
          cd curl-7.53.1
          ./configure --host=x86_64-w64-mingw32 --disable-shared --enable-static --without-ssl --without-zlib
          make
          mkdir -p "${{ github.workspace }}/curl-windows"
          cp -r include "${{ github.workspace }}/curl-windows/include"
          cp lib/.libs/libcurl.a "${{ github.workspace }}/curl-windows/lib/libcurl.a"

      - name: Configure CMake for Windows (Cross-Compilation)
        run: |
          mkdir -p build-windows
          cd build-windows
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
            -DCMAKE_BUILD_TYPE=Release \
            -DCURL_INCLUDE_DIR="${{ github.workspace }}/curl-windows/include" \
            -DCURL_LIBRARY="${{ github.workspace }}/curl-windows/lib/libcurl.a" \
            -DCMAKE_EXE_LINKER_FLAGS="-L${{ github.workspace }}/curl-windows/lib -lcurl"

      - name: Build for Windows (Cross-Compilation)
        run: |
          cd build-windows
          cmake --build . --config Release

      - name: Package Windows Artifact
        run: |
          cd build-windows
          zip -r windows-build.zip .
        shell: bash

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build.zip
          path: build-windows/windows-build.zip

  release:
    runs-on: ubuntu-latest
    needs: [ubuntu-build, windows-cross-compile]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Create artifacts directory
        run: mkdir -p ./artifacts

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-build.zip
          path: ./artifacts

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build.zip
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}  # Use PAT instead of default GITHUB_TOKEN
        with:
          tag_name: "release-${{ github.run_id }}"
          release_name: "Automated Release ${{ github.run_id }}"
          draft: false
          prerelease: false

      - name: Upload Linux Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu-build.zip
          asset_name: ubuntu-build.zip
          asset_content_type: application/zip

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build.zip
          asset_name: windows-build.zip
          asset_content_type: application/zip
