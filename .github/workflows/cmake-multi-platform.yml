name: CMake Build with MSYS2 on Windows and Linux

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual trigger

jobs:
  ubuntu-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libssl-dev libcurl4-openssl-dev build-essential

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release

      - name: Package Artifact
        run: |
          cd build
          zip -r ubuntu-build.zip .
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-build.zip
          path: build/ubuntu-build.zip

  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-curl

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build -S . \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_BUILD_TYPE=Release

      - name: Build
        shell: bash
        run: cmake --build build --config Release

      - name: Package Artifact
        run: |
          cd build
          zip -r windows-build.zip .
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build.zip
          path: build/windows-build.zip

  release:
    runs-on: ubuntu-latest
    needs: [ubuntu-build, windows-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download Ubuntu Artifact
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-build.zip
          path: ./artifacts

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build.zip
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_id }}"
          release_name: "Automated Release ${{ github.run_id }}"
          draft: false
          prerelease: false

      - name: Upload Ubuntu Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu-build.zip
          asset_name: ubuntu-build.zip
          asset_content_type: application/zip

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build.zip
          asset_name: windows-build.zip
          asset_content_type: application/zip
